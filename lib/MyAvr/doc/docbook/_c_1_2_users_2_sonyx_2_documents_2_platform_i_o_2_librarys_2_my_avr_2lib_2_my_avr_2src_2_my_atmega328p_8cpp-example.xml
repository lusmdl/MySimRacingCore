<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_1_2_users_2_sonyx_2_documents_2_platform_i_o_2_librarys_2_my_avr_2lib_2_my_avr_2src_2_my_atmega328p_8cpp-example" xml:lang="en-US">
<title>C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyAtmega328p.cpp</title>

<para>Constructor of the <link linkend="_class_my_atmega328p">MyAtmega328p</link> class Initializes the CPU frequency of the microcontroller.</para>

<para>Constructor of the <link linkend="_class_my_atmega328p">MyAtmega328p</link> class Initializes the CPU frequency of the microcontroller.<warning><title>Warning</title>

<para>This method is considered unsafe in situations where incorrect CPU frequency can lead to system instability.</para>
</warning>
<note><title>Note</title>

<para>It is important to verify the compatibility of the specified frequency with the microcontroller specifications.</para>
</note>
<link linkend="_class_my_atmega328p">MyAtmega328p</link> myController(F_CPU);</para>

<para><literallayout><computeroutput>
<emphasis role="comment">//&#32;HEADER</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;<link linkend="__my_atmega328p_8hpp">MyAtmega328p.hpp</link>&quot;</emphasis>


MyAtmega328p&#32;::MyAtmega328p(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;f_cpu)&#32;{}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::writeToEEPROM(uint16_t&#32;address,&#32;<emphasis role="keyword">const</emphasis>&#32;String&#32;&amp;str)&#32;{


&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;address&#32;&lt;&#32;E2END)&#32;{&#32;<emphasis role="comment">//&#32;Speicherzugriff&#32;einschränken&#32;auf&#32;den&#32;EEPROM-Bereich</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;str.length();
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;&gt;&#32;E2END&#32;-&#32;address)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;E2END&#32;-&#32;address;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;eeprom_write_block(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.c_str()),&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(address),&#32;length);
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::readFromEEPROM(uint16_t&#32;address,&#32;String&#32;&amp;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size_buffer)&#32;{

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;address&#32;&lt;&#32;E2END)&#32;{&#32;<emphasis role="comment">//&#32;Überprüfen,&#32;ob&#32;Adresse&#32;innerhalb&#32;des&#32;EEPROM-Bereichs&#32;liegt</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;E2END&#32;-&#32;address;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;&gt;&#32;size_buffer)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;size_buffer;
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;buffer&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[length&#32;+&#32;1];
&#32;&#32;&#32;&#32;eeprom_read_block(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(buffer),&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(address),&#32;length);
&#32;&#32;&#32;&#32;buffer[length]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
&#32;&#32;&#32;&#32;str&#32;=&#32;buffer;
&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;buffer;
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::writeToEEPROM(uint16_t&#32;address,&#32;uint8_t&#32;value)&#32;{

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;address&#32;&lt;&#32;E2END)&#32;{&#32;<emphasis role="comment">//&#32;Speicher-Zugriff&#32;einschränken&#32;auf&#32;Adressebereich&#32;des&#32;EEPROM</emphasis>

&#32;&#32;&#32;&#32;eeprom_write_byte((uint8_t*)address,&#32;value);
&#32;&#32;}
}


uint8_t&#32;MyAtmega328p&#32;::readFromEEPROM(uint16_t&#32;address)&#32;{

&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;address&#32;&lt;&#32;E2END)&#32;{&#32;<emphasis role="comment">//&#32;Überprüfen,&#32;ob&#32;Adresse&#32;innerhalb&#32;des&#32;EEPROM-Bereichs&#32;liegt</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;eeprom_read_byte((uint8_t*)address);
&#32;&#32;}
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="comment">//&#32;Rückgabewert,&#32;wenn&#32;Adresse&#32;ungültig&#32;ist</emphasis>
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::execTest(uint16_t&#32;delay)&#32;{

&#32;&#32;<emphasis role="comment">//&#32;Den&#32;digitalen&#32;Pin&#32;als&#32;Ausgang&#32;konfigurieren</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;DDRB&#32;|=&#32;(1&#32;&lt;&lt;&#32;DDB5);</emphasis>
&#32;&#32;setBit(DDRB,&#32;DDB5,&#32;<emphasis role="keyword">true</emphasis>);

&#32;&#32;<emphasis role="comment">//&#32;Die&#32;LED&#32;einschalten</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;PORTB&#32;|=&#32;(1&#32;&lt;&lt;&#32;PORTB5);</emphasis>
&#32;&#32;setBit(PORTB,&#32;DDB5,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;execDelayMs(delay);&#32;<emphasis role="comment">//&#32;Eine&#32;Sekunde&#32;warten</emphasis>

&#32;&#32;<emphasis role="comment">//&#32;Die&#32;LED&#32;ausschalten</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;PORTB&#32;&amp;=&#32;~(1&#32;&lt;&lt;&#32;PORTB5);</emphasis>
&#32;&#32;setBit(PORTB,&#32;DDB5,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;execDelayMs(delay);&#32;<emphasis role="comment">//&#32;Eine&#32;Sekunde&#32;warten</emphasis>
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::initUart(uint32_t&#32;baudrate)&#32;{

&#32;&#32;uint16_t&#32;ubrr&#32;=&#32;F_CPU&#32;/&#32;(16&#32;*&#32;baudrate)&#32;-&#32;1;

&#32;&#32;<emphasis role="comment">//&#32;Set&#32;baud&#32;rate</emphasis>

&#32;&#32;UBRR0H&#32;=&#32;(uint8_t)(ubrr&#32;&gt;&gt;&#32;8);
&#32;&#32;UBRR0L&#32;=&#32;(uint8_t)ubrr;

&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;receiver&#32;and&#32;transmitter</emphasis>

&#32;&#32;UCSR0B&#32;=&#32;(1&#32;&lt;&lt;&#32;RXEN0)&#32;|&#32;(1&#32;&lt;&lt;&#32;TXEN0);

&#32;&#32;<emphasis role="comment">//&#32;Set&#32;frame&#32;format:&#32;8data,&#32;2stop&#32;bit</emphasis>

&#32;&#32;<emphasis role="comment">//&#32;UCSR0C&#32;=&#32;(1&#32;&lt;&lt;&#32;UCSZ01)&#32;|&#32;(1&#32;&lt;&lt;&#32;UCSZ00);</emphasis>
&#32;&#32;UCSR0C&#32;=&#32;(1&#32;&lt;&lt;&#32;USBS0)&#32;|&#32;(3&#32;&lt;&lt;&#32;UCSZ00);

&#32;&#32;printUart(<emphasis role="stringliteral">&quot;\nHello&#32;World!\n&quot;</emphasis>);
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::sendCharUart(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{

&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(UCSR0A&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;UDRE0)));
&#32;&#32;&#32;&#32;UDR0&#32;=&#32;c;
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::printUart(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str)&#32;{

&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;strlen(str);
&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)&#32;{

&#32;&#32;&#32;&#32;sendCharUart(str[i]);
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_atmega328p_1a23a876fa091060f4ecc2c97867eda9fd">MyAtmega328p::printUart</link>(<emphasis role="keyword">const</emphasis>&#32;String&#32;&amp;str)&#32;{

&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;str.length();
&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)&#32;{

&#32;&#32;&#32;&#32;sendCharUart(str.charAt(i));
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;MyAtmega328p&#32;::setTC0Config(<link linkend="__my_avr_8hpp_1a6254561796d46c748001adeaf5e6d93c">enum_tcmodes</link>&#32;mode,&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84">enum_tcprescalers</link>&#32;prescaler,&#32;uint8_t&#32;value_top)&#32;{

&#32;&#32;<emphasis role="comment">//&#32;Konfiguriere&#32;Timer/Counter&#32;0</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;-</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;Mode&#32;&#32;|&#32;WGM02&#32;|&#32;WGM01&#32;|&#32;WGM00&#32;|&#32;Timer/Counter&#32;Mode&#32;of&#32;Operation&#32;|&#32;TOP&#32;&#32;&#32;|&#32;Update&#32;of&#32;OCR0x&#32;at&#32;TOV&#32;Flag&#32;Set&#32;on</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;Normal&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;0xFF&#32;&#32;|&#32;Immediate&#32;MAX</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;PWM,&#32;Phase&#32;Correct&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;0xFF&#32;&#32;|&#32;TOP&#32;BOTTOM</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;2&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;CTC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;OCRA&#32;&#32;|&#32;Immediate&#32;MAX</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;3&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;Fast&#32;PWM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;0xFF&#32;&#32;|&#32;BOTTOM&#32;MAX</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;5&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;0&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;PWM,&#32;Phase&#32;Correct&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;OCRA&#32;&#32;|&#32;TOP&#32;BOTTOM</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;7&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;1&#32;&#32;&#32;&#32;&#32;|&#32;Fast&#32;PWM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;OCRA&#32;&#32;|&#32;BOTTOM&#32;TOP</emphasis>
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(mode)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a6254561796d46c748001adeaf5e6d93cad472717efbd11a2e3c7a10a2bcece779">CTC</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ctc&#32;modus&#32;einrichten</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;setBit(TCCR0A,&#32;WGM00,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(TCCR0A,&#32;WGM01,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(TCCR0B,&#32;WGM02,&#32;0);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prescaler</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;setTC01Prescaler(prescaler,&#32;TCCR0B,&#32;CS02,&#32;CS01,&#32;CS00);


&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Setze&#32;den&#32;Vergleichswert&#32;für&#32;den&#32;CTC-Modus</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;don&apos;t&#32;use&#32;this&#32;calculation.&#32;Do&#32;this&#32;in&#32;the&#32;main&#32;code&#32;instead!</emphasis>
<emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;clkPerMillisekond&#32;{&#32;(&#32;cpuFreq&#32;/&#32;n&#32;)&#32;/&#32;1000&#32;};</emphasis>
<emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;OCR0A&#32;=&#32;(&#32;(&#32;clkPerMillisekond&#32;*&#32;topTime&#32;)&#32;-&#32;1&#32;);</emphasis>
<emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;OCR0A&#32;=&#32;value_top;

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;interrupt&#32;aktivieren</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;setBit(TIMSK0,&#32;OCIE0A);
&#32;&#32;&#32;&#32;&#32;&#32;sei();

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
&#32;&#32;}
}


uint32_t&#32;MyAtmega328p&#32;::setTC01Prescaler(<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84">enum_tcprescalers</link>&#32;prescaler,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit_02,&#32;uint8_t&#32;bit_01,&#32;uint8_t&#32;bit_00)&#32;{

&#32;&#32;<emphasis role="comment">//&#32;Prescaler&#32;Tabelle</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;-</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|02&#32;|01&#32;|00&#32;|</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;0&#32;|&#32;0&#32;|&#32;0&#32;|&#32;No&#32;clock&#32;source&#32;(Timer/Counter&#32;stopped)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;0&#32;|&#32;0&#32;|&#32;1&#32;|&#32;clkI/O/1&#32;(No&#32;prescaling)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;0&#32;|&#32;1&#32;|&#32;0&#32;|&#32;clkI/O/8&#32;(From&#32;prescaler)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;0&#32;|&#32;1&#32;|&#32;1&#32;|&#32;clkI/O/64&#32;(From&#32;prescaler)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;1&#32;|&#32;0&#32;|&#32;0&#32;|&#32;clkI/O/256&#32;(From&#32;prescaler)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;1&#32;|&#32;0&#32;|&#32;1&#32;|&#32;clkI/O/1024&#32;(From&#32;prescaler)</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;1&#32;|&#32;1&#32;|&#32;0&#32;|&#32;External&#32;clock&#32;source&#32;on&#32;T0&#32;pin.&#32;Clock&#32;on&#32;falling&#32;edge.</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;|&#32;1&#32;|&#32;1&#32;|&#32;1&#32;|&#32;External&#32;clock&#32;source&#32;on&#32;T0&#32;pin.&#32;Clock&#32;on&#32;rising&#32;edge.</emphasis>
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(prescaler)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84ad2ef98ac0d98086868c235ef37670273">CLK_1</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a4f4b40052b3e128cbef3e15dd579c50e">CLK_8</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">false</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;8;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a0a39b4aae1959fc16bbe8382aa2f36de">CLK_64</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">false</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;64;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84adb5e9424a002d86170784b48e6943810">CLK_256</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">true</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;256;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84add15888bea74c6eeca3a3fb06181b857">CLK_1024</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">true</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1024;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a33416c83ecdef3b829acc08e92983853">EXT_CLK_SOURCE_FALLING_EDGE</link>:
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">true</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84abf7407a632cd1a1dc9eaa6fca42ee2a8">EXT_CLK_SOURCE_RISING_EDGE</link>:
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">true</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">true</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_00,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_01,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(reg,&#32;bit_02,&#32;<emphasis role="keyword">false</emphasis>);

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
&#32;&#32;}

&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_atmega328p_1a91986a3df6ec4032907aacf06696a8a6">MyAtmega328p::execSleep</link>(<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374">enum_sleepmodes</link>&#32;mode,&#32;uint8_t&#32;bits_power_reduction,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;enable_bod_sleep)&#32;{

&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;interrupts</emphasis>
&#32;&#32;cli();

&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;sleep&#32;mode</emphasis>
&#32;&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">setBit</link>(MCUCR,&#32;SE,&#32;<emphasis role="keyword">false</emphasis>);

&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;requested&#32;sleep&#32;mode</emphasis>
&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(mode)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374afd6a0e4343048b10646dd2976cc5ad18">IDLE</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2));

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a19e4c86357ccabfaf43e2fabe2189f3c">ADC_NOISE_REDUCTION</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">setBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0));
&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2));

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a2abda45f1b1e5bbe193611fb41ae7dfa">POWER_DOWN</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">setBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1));
&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0));&#32;

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a412ffca781db3a099f287df487667d19">POWER_SAVE</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">setBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1));
&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2));

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374ae4634ae4352b512b38c5da9dc1610ca6">STANDBY</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;recommend&#32;for&#32;use&#32;with&#32;external&#32;crystals&#32;or&#32;resonators</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0));
&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">setBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2));

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374ad57e897be0d28a3218fa9fc2eeb650e2">EXTENDED_STANDBY</link>:

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;recommend&#32;for&#32;use&#32;with&#32;external&#32;crystals&#32;or&#32;resonators</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">setBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2)&#32;);&#32;

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invalid&#32;sleep&#32;mode,&#32;return&#32;imidiately</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
&#32;&#32;}

&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;power&#32;reduction&#32;bits</emphasis>
&#32;&#32;PRR&#32;|=&#32;bits_power_reduction;

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enable_bod_sleep)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;BODS&#32;bit&#32;and&#32;set&#32;BODS&#32;to&#32;disable&#32;BOD&#32;in&#32;sleep&#32;mode&#32;if&#32;enableBODSleep&#32;is&#32;true</emphasis>

&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">setBit</link>(MCUCR,&#32;BODS);
&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">setBit</link>(MCUCR,&#32;BODSE);
&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1ac11d8131f2a39a638ace4418adeebbd7">clearBit</link>(MCUCR,&#32;BODSE);
&#32;&#32;}

&#32;&#32;<emphasis role="comment">//&#32;Delay&#32;for&#32;three&#32;clock&#32;cycles</emphasis>

&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;nop&quot;</emphasis>);
&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;nop&quot;</emphasis>);
&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;nop&quot;</emphasis>);

&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;sleep&#32;mode</emphasis>
&#32;&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">setBit</link>(SMCR,&#32;SE);

&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;interrupts</emphasis>
&#32;&#32;sei();

&#32;&#32;<emphasis role="comment">//&#32;Enter&#32;sleep&#32;mode</emphasis>
&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;sleep&quot;</emphasis>);

&#32;&#32;<emphasis role="comment">//&#32;Execution&#32;will&#32;resume&#32;here&#32;after&#32;waking&#32;up</emphasis>
&#32;&#32;<emphasis role="comment">//...</emphasis>

&#32;&#32;<emphasis role="comment">//&#32;Clear&#32;the&#32;power&#32;reduction&#32;bits</emphasis>
&#32;&#32;PRR&#32;&amp;=&#32;~bits_power_reduction;

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enable_bod_sleep)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Re-enable&#32;BOD&#32;after&#32;sleep&#32;mode&#32;if&#32;enableBODSleep&#32;is&#32;true&#32;(optional)</emphasis>

&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1ac11d8131f2a39a638ace4418adeebbd7">clearBit</link>(MCUCR,&#32;BODS);
&#32;&#32;}

&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;sleep&#32;mode</emphasis>

&#32;&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">setBit</link>(MCUCR,&#32;SE,&#32;<emphasis role="keyword">false</emphasis>);
&#32;&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">clearBitMask</link>(SMCR,&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM0)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM1)&#32;|&#32;<link linkend="__my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600">BITMASK</link>(SM2));
}
</computeroutput></literallayout> </para>
</section>
