<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_1_2_users_2_sonyx_2_documents_2_platform_i_o_2_librarys_2_my_avr_2lib_2_my_avr_2src_2_my_button_8cpp-example" xml:lang="en-US">
<title>C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyButton.cpp</title>

<para>Constructor of the class <link linkend="_class_my_button">MyButton</link> Initializes the member variables of the class.</para>

<para>Constructor of the class <link linkend="_class_my_button">MyButton</link> Initializes the member variables of the class.
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PINXn</entry><entry>
<para>A reference to the register containing the status of the button. </para>
</entry>
                            </row>
                            <row>
<entry>bit_position</entry><entry>
<para>The position of the bit in the register representing the button status. </para>
</entry>
                            </row>
                            <row>
<entry>invert</entry><entry>
<para>Indicates if the button input should be inverted.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <warning><title>Warning</title>

<para>This method may have unforeseen consequences and could be insecure at certain points.</para>
</warning>
<note><title>Note</title>

<para>Make sure to properly configure the parameters to avoid unexpected behaviors.</para>
</note>
<link linkend="_class_my_button">MyButton</link> button(pinxn, 3, true);</para>

<para><literallayout><computeroutput>
<emphasis role="comment">//&#32;HEADER</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;<link linkend="__my_button_8hpp">MyButton.hpp</link>&quot;</emphasis>

MyButton&#32;::MyButton(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;pinxn,&#32;uint8_t&#32;bit_position,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;invert)&#32;:&#32;
&#32;&#32;<emphasis role="comment">//ptrRegister_(&amp;pinxn),&#32;</emphasis>
&#32;&#32;reg_&#32;{nullptr,&#32;nullptr,&#32;&amp;pinxn},
&#32;&#32;bit_&#32;(bit_position),&#32;
&#32;&#32;<emphasis role="comment">//pushed_(false),&#32;</emphasis>
&#32;&#32;<emphasis role="comment">//numberGetPushed_(0),&#32;</emphasis>
&#32;&#32;<emphasis role="comment">//enableInvert_(invert)&#32;</emphasis>
&#32;&#32;button_&#32;{false,&#32;false,&#32;false,&#32;false,&#32;0,&#32;invert},
&#32;&#32;command_&#32;(nullptr),
&#32;&#32;observer_&#32;(nullptr)&#32;{}


MyButton&#32;::MyButton(<link linkend="_structpod__gpioregister">pod_gpioregister</link>&#32;&amp;reg,&#32;uint8_t&#32;bit_position,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;invert)&#32;:&#32;
&#32;&#32;reg_(reg),
&#32;&#32;bit_(bit_position),
&#32;&#32;button_{false,&#32;false,&#32;false,&#32;false,&#32;0,&#32;invert},
&#32;&#32;command_&#32;(nullptr),
&#32;&#32;observer_&#32;(nullptr)&#32;{}


<link linkend="_structpod__buttonstatus">pod_buttonstatus</link>&#32;MyButton&#32;::getStatus()&#32;{

&#32;&#32;<emphasis role="comment">//&#32;this&#32;method&#32;calculate&#32;all&#32;data&#32;based&#32;on&#32;the&#32;register&#32;value</emphasis>
&#32;&#32;<emphasis role="comment">//&#32;WARNING:&#32;do&#32;not&#32;read&#32;the&#32;calculated&#32;values,&#32;always&#32;read&#32;the&#32;actual&#32;register&#32;value</emphasis>

&#32;&#32;<emphasis role="comment">//&#32;Führe&#32;eine&#32;NOP-Operation&#32;für&#32;die&#32;Synchronisation&#32;aus</emphasis>
&#32;&#32;execNop();

&#32;&#32;<emphasis role="comment">//&#32;reset&#32;edge&#32;flags</emphasis>
&#32;&#32;
&#32;&#32;button_.fallingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;button_.risingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;

&#32;&#32;<emphasis role="comment">//&#32;acutal&#32;read&#32;register&#32;data,&#32;use&#32;this&#32;everytime&#32;in&#32;this&#32;method</emphasis>
&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;buttonPushed&#32;{<emphasis role="keyword">false</emphasis>};
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button_.enableInvert)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;parameter&#32;is&#32;set,&#32;swap&#32;the&#32;bit</emphasis>
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;usefull&#32;if&#32;you&#32;use&#32;pullup&#32;resistors</emphasis>

&#32;&#32;&#32;&#32;buttonPushed&#32;=&#32;getBit(*reg_.ptrPin,&#32;bit_)&#32;?&#32;false&#32;:&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;}
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{

&#32;&#32;&#32;&#32;buttonPushed&#32;=&#32;getBit(*reg_.ptrPin,&#32;bit_)&#32;?&#32;true&#32;:&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;}

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buttonPushed)&#32;{

&#32;&#32;&#32;&#32;button_.pushed&#32;=&#32;<emphasis role="keyword">true</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button_.flagOldPush&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rising&#32;edge</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;button_.risingEdge&#32;=&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;&#32;&#32;&#32;&#32;button_.numberGetPushed++;
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(observer_&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;notifyObserver();
&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
&#32;&#32;}&#32;
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{

&#32;&#32;&#32;&#32;button_.pushed&#32;=&#32;<emphasis role="keyword">false</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button_.flagOldPush&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;falling&#32;edge</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;button_.fallingEdge&#32;=&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;&#32;&#32;}
&#32;&#32;}

&#32;&#32;<emphasis role="comment">//&#32;set&#32;old&#32;flag&#32;after</emphasis>
&#32;&#32;button_.flagOldPush&#32;=&#32;buttonPushed;

&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;button_;
}


<emphasis role="keywordtype">void</emphasis>&#32;MyButton&#32;::setStatus(uint32_t&#32;value_new)&#32;{

&#32;&#32;button_.numberGetPushed&#32;=&#32;value_new;
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_new&#32;==&#32;0)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;everything&#32;if&#32;new&#32;value&#32;is&#32;zero</emphasis>

&#32;&#32;&#32;&#32;button_.pushed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_.flagOldPush&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_.fallingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_.risingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_button_1a845be1b8938b5ec3058070f6f624f39d">MyButton::setCmd</link>(<link linkend="_classinterface___command">interface_Command</link>&#32;*cmd)&#32;{

&#32;&#32;command_&#32;=&#32;cmd;
}

<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_button_1a698b202d6e68dd6f1d9244ae2a8b5660">MyButton::attachObserver</link>(<link linkend="_classinterface___observer">interface_Observer</link>&#32;*observer)&#32;{

&#32;&#32;observer_&#32;=&#32;observer;
}

<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_button_1a5c91bab48b7b2155e0acfb6bb82ddf60">MyButton::detachObserver</link>(<link linkend="_classinterface___observer">interface_Observer</link>&#32;*observer)&#32;{

&#32;&#32;observer_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
}

<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_button_1a15fe0e4218e698530a548a8f92f58a25">MyButton::notifyObserver</link>()&#32;{

&#32;&#32;observer_-&gt;<link linkend="_classinterface___observer_1abb26b58bee249d3516fa31a041b39c33">update</link>(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
}

<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_button_1afa541be6b36b377940e5a8ca89e87d19">MyButton::execCmd</link>()&#32;{

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(command_)&#32;{

&#32;&#32;&#32;&#32;command_-&gt;<link linkend="_classinterface___command_1a44a839b075fcfeb83708daf4e186666d">exec</link>();
&#32;&#32;}
}
</computeroutput></literallayout> </para>
</section>
