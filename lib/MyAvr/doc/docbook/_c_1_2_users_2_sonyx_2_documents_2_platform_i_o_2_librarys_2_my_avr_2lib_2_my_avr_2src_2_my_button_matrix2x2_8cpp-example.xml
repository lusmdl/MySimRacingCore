<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_1_2_users_2_sonyx_2_documents_2_platform_i_o_2_librarys_2_my_avr_2lib_2_my_avr_2src_2_my_button_matrix2x2_8cpp-example" xml:lang="en-US">
<title>C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyButtonMatrix2x2.cpp</title>

<para>the object of the class <link linkend="_class_my_button_matrix2x2">MyButtonMatrix2x2</link> with the given parameters.</para>

<para>the object of the class <link linkend="_class_my_button_matrix2x2">MyButtonMatrix2x2</link> with the given parameters.
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DDXn</entry><entry>
<para>Reference to the Data Direction Register of the corresponding port </para>
</entry>
                            </row>
                            <row>
<entry>PORTXn</entry><entry>
<para>Reference to the Output Register of the corresponding port </para>
</entry>
                            </row>
                            <row>
<entry>PINXn</entry><entry>
<para>Reference to the Input Register of the corresponding port </para>
</entry>
                            </row>
                            <row>
<entry>bit_position</entry><entry>
<para>Array of bit positions for the button matrix</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <warning><title>Warning</title>

<para>This method may be unsafe in certain conditions and unexpected behavior could occur.</para>
</warning>
<note><title>Note</title>

<para>It is important to ensure the correct mapping of bit positions for button matrix functionality.</para>
</note>
<link linkend="_class_my_button_matrix2x2">MyButtonMatrix2x2</link> matrix(PORTD, PORTD, PIND, {0, 1, 2, 3});</para>

<para><literallayout><computeroutput>
<emphasis role="comment">//&#32;HEADER</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;<link linkend="__my_button_matrix2x2_8hpp">MyButtonMatrix2x2.hpp</link>&quot;</emphasis>


MyButtonMatrix2x2&#32;::MyButtonMatrix2x2(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;ddxn,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;portxn,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;pinxn,&#32;uint8_t&#32;bit_position[]&#32;)&#32;:&#32;
&#32;&#32;<emphasis role="comment">//&#32;umbau&#32;auf&#32;POD&#32;struct</emphasis>
&#32;&#32;<emphasis role="comment">//reg_.ptrDataDirection&#32;(&amp;ddxn),&#32;</emphasis>
&#32;&#32;<emphasis role="comment">//reg_.ptrPort(&amp;portxn),&#32;</emphasis>
&#32;&#32;<emphasis role="comment">//reg_.ptrPin(&amp;pinxn)&#32;</emphasis>
&#32;&#32;reg_&#32;{&amp;ddxn,&#32;&amp;portxn,&#32;&amp;pinxn}&#32;{

&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BTN_MAX_;&#32;i++)&#32;{
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;init&#32;each&#32;member</emphasis>
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;bit_[i]&#32;=&#32;bit_position[i];
&#32;&#32;&#32;&#32;button_[i].enableInvert&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[i].fallingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[i].flagOldPush&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[i].numberGetPushed&#32;=&#32;0;
&#32;&#32;&#32;&#32;button_[i].pushed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[i].risingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;}
}

MyButtonMatrix2x2&#32;::MyButtonMatrix2x2(<link linkend="_structpod__gpioregister">pod_gpioregister</link>&amp;&#32;ptr,&#32;uint8_t&#32;bit_position[BTN_MAX_])&#32;:
&#32;&#32;reg_&#32;(ptr)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BTN_MAX_;&#32;i++)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;init&#32;each&#32;member</emphasis>
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;bit_[i]&#32;=&#32;bit_position[i];
&#32;&#32;&#32;&#32;}
&#32;&#32;}


<link linkend="_structpod__buttonstatus">pod_buttonstatus</link>&#32;MyButtonMatrix2x2&#32;::getButtonStatus(uint8_t&#32;button)&#32;{&#32;&#32;

&#32;&#32;uint8_t&#32;sense&#32;=&#32;button&#32;%&#32;2;
&#32;&#32;uint8_t&#32;ground&#32;=&#32;(button&#32;&lt;&#32;2)&#32;?&#32;2&#32;:&#32;3;
&#32;&#32;uint8_t&#32;live[2]&#32;{0,0};

&#32;&#32;uint8_t&#32;count&#32;=&#32;0;

&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;BTN_MAX_;&#32;i++)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;sense&#32;||&#32;i&#32;==&#32;ground)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nothing&#32;to&#32;see&#32;here</emphasis>

&#32;&#32;&#32;&#32;}&#32;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;live[count]&#32;=&#32;i;
&#32;&#32;&#32;&#32;&#32;&#32;count++;&#32;&#32;
&#32;&#32;&#32;&#32;}
&#32;&#32;}

&#32;&#32;setGpioConfig(<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a851c2ac60276ada62e8d9ba216c7a487">INPUT_PULLUP</link>,&#32;*reg_.ptrDataDirection,&#32;*reg_.ptrPort,&#32;bit_[sense]);
&#32;&#32;setGpioConfig(<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a73010ac0f307d96c97238d8878f14b3e">OUTPUT_SINK</link>,&#32;*reg_.ptrDataDirection,&#32;*reg_.ptrPort,&#32;bit_[ground]);
&#32;&#32;setGpioConfig(<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a8dd6b0345a569bf4a420f510341124b6">OUTPUT_SOURCE</link>,&#32;*reg_.ptrDataDirection,&#32;*reg_.ptrPort,&#32;bit_[live[0]]);
&#32;&#32;setGpioConfig(<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a8dd6b0345a569bf4a420f510341124b6">OUTPUT_SOURCE</link>,&#32;*reg_.ptrDataDirection,&#32;*reg_.ptrPort,&#32;bit_[live[1]]);
&#32;&#32;
&#32;&#32;execNop();

&#32;&#32;<emphasis role="comment">//&#32;reset&#32;edge&#32;flags</emphasis>
&#32;&#32;
&#32;&#32;button_[button].fallingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;button_[button].risingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;

&#32;&#32;<emphasis role="comment">//&#32;acutal&#32;read&#32;register&#32;data,&#32;use&#32;this&#32;everytime&#32;in&#32;this&#32;method</emphasis>
&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;buttonPushed&#32;=&#32;getBit(*reg_.ptrPin,&#32;bit_[sense])&#32;?&#32;false&#32;:&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(buttonPushed)&#32;{

&#32;&#32;&#32;&#32;button_[button].pushed&#32;=&#32;<emphasis role="keyword">true</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button_[button].flagOldPush&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rising&#32;edge</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;button_[button].risingEdge&#32;=&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;&#32;&#32;&#32;&#32;button_[button].numberGetPushed++;
&#32;&#32;&#32;&#32;}
&#32;&#32;}&#32;
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{

&#32;&#32;&#32;&#32;button_[button].pushed&#32;=&#32;<emphasis role="keyword">false</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(button_[button].flagOldPush&#32;==&#32;<emphasis role="keyword">true</emphasis>)&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;falling&#32;edge</emphasis>

&#32;&#32;&#32;&#32;&#32;&#32;button_[button].fallingEdge&#32;=&#32;<emphasis role="keyword">true</emphasis>;
&#32;&#32;&#32;&#32;}
&#32;&#32;}
&#32;&#32;
&#32;&#32;<emphasis role="comment">//&#32;set&#32;old&#32;flag&#32;after</emphasis>
&#32;&#32;button_[button].flagOldPush&#32;=&#32;buttonPushed;
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;button_[button];
}

<link linkend="_structpod__buttonstatus">pod_buttonstatus</link>&#32;MyButtonMatrix2x2&#32;::setButtonStatus(uint8_t&#32;button,&#32;uint32_t&#32;value_new)&#32;{

&#32;&#32;button_[button].<link linkend="_structpod__buttonstatus_1a1e93bc76f005f56b7629222841a5bb35">numberGetPushed</link>&#32;=&#32;value_new;
&#32;&#32;
&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_new&#32;==&#32;0)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;everything&#32;if&#32;new&#32;value&#32;is&#32;zero</emphasis>

&#32;&#32;&#32;&#32;button_[button].pushed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[button].flagOldPush&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[button].fallingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;&#32;&#32;button_[button].risingEdge&#32;=&#32;<emphasis role="keyword">false</emphasis>;
&#32;&#32;}
}
</computeroutput></literallayout> </para>
</section>
