<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__c_1_2_users_2_sonyx_2_documents_2_platform_i_o_2_librarys_2_my_avr_2lib_2_my_avr_2src_2_my_avr_8cpp-example" xml:lang="en-US">
<title>C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyAvr.cpp</title>

<para>Retrieves the value of a specific bit in a register. This function reads and returns the value of a specified bit in a register.</para>

<para>Retrieves the value of a specific bit in a register. This function reads and returns the value of a specified bit in a register.
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>reg</entry><entry>
<para>The register from which the bit value is to be read </para>
</entry>
                            </row>
                            <row>
<entry>bit</entry><entry>
<para>The position of the bit in the register (0 - 7)</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The value of the specified bit (true if set, false if not set)</para>
</formalpara>
<warning><title>Warning</title>

<para>This method may be sensitive to changes in hardware configuration or external interference. Use with caution in critical systems.</para>
</warning>
<note><title>Note</title>

<para>The bit position should be within the range of 0 to 7 for proper functionality.</para>
</note>
uint8_t myRegister = 0b10101010; bool bitValue = myController.getBit(myRegister, 3); // The value of bitValue will be true (1) as the bit at position 3 is set in myRegister</para>

<para><literallayout><computeroutput>
<emphasis role="comment">//&#32;HEADER</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;<link linkend="__my_avr_8hpp">MyAvr.hpp</link>&quot;</emphasis>


<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_my_controller_1a7b49b818dd3b640cbeece0f42f00944d">MyController::getBit</link>(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit)&#32;{

&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((reg&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;bit))&#32;!=&#32;0);
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b">MyController::setBit</link>(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value)&#32;{

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value)&#32;{

&#32;&#32;&#32;&#32;reg&#32;|=&#32;(1&#32;&lt;&lt;&#32;bit);&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;1</emphasis>
&#32;&#32;}
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
&#32;&#32;&#32;&#32;reg&#32;&amp;=&#32;~(1&#32;&lt;&lt;&#32;bit);&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;0</emphasis>
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1ac11d8131f2a39a638ace4418adeebbd7">MyController::clearBit</link>(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit)&#32;{
&#32;&#32;
&#32;&#32;reg&#32;&amp;=&#32;~(1&#32;&lt;&lt;&#32;bit);&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;0</emphasis>
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1a552532ef8cb1a262be9029c7609a62c6">MyController::setBitMask</link>(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit_mask,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value)&#32;{

&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value)&#32;{

&#32;&#32;&#32;&#32;reg&#32;|=&#32;bit_mask;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;1</emphasis>
&#32;&#32;}&#32;
&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{

&#32;&#32;&#32;&#32;reg&#32;&amp;=&#32;~bit_mask;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;0</emphasis>
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd">MyController::clearBitMask</link>(<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;reg,&#32;uint8_t&#32;bit_mask)&#32;{

&#32;&#32;reg&#32;&amp;=&#32;~bit_mask;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;bit&#32;to&#32;0</emphasis>
}


<emphasis role="keywordtype">void</emphasis>&#32;MyController&#32;::setGpioConfig(<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8">enum_gpiomodes</link>&#32;mode,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;ddxn,&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint8_t&#32;&amp;portxn,&#32;uint8_t&#32;bit)
{

&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(mode)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a63d584017f7c02340d67a87f3755085a">INPUT_TRI_STATE_1</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(ddxn,&#32;bit,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(portxn,&#32;bit,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a851c2ac60276ada62e8d9ba216c7a487">INPUT_PULLUP</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(ddxn,&#32;bit,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(portxn,&#32;bit,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(MCUCR,&#32;PUD,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8ad6ef398fae2c8923732f80c01a9b4fdb">INPUT_TRI_STATE_2</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(ddxn,&#32;bit,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(portxn,&#32;bit,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(MCUCR,&#32;PUD,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a73010ac0f307d96c97238d8878f14b3e">OUTPUT_SINK</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(ddxn,&#32;bit,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(portxn,&#32;bit,&#32;0);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__my_avr_8hpp_1a105ae23d3b40bf5ab26939bc88c849f8a8dd6b0345a569bf4a420f510341124b6">OUTPUT_SOURCE</link>:

&#32;&#32;&#32;&#32;&#32;&#32;setBit(ddxn,&#32;bit,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;setBit(portxn,&#32;bit,&#32;1);
&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:

&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
&#32;&#32;}
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1a452b611e91abf97cc6caeacc4949dbc4">MyController::execDelayMs</link>(uint32_t&#32;ms)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Anzahl&#32;der&#32;Mikrosekunden&#32;basierend&#32;auf&#32;den&#32;Millisekunden&#32;berechnen</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint32_t&#32;sizeOf32Bit&#32;=&#32;0xFFFFFFFF;
&#32;&#32;&#32;&#32;uint32_t&#32;us&#32;{sizeOf32Bit};

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prüfe&#32;ob&#32;zu&#32;viele&#32;millisekunden&#32;ausgewählt&#32;wurden</emphasis>

&#32;&#32;&#32;&#32;uint32_t&#32;maxMillis&#32;=&#32;sizeOf32Bit/1000;
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ms&#32;&lt;&#32;(maxMillis))&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;us&#32;=&#32;ms&#32;*&#32;1000;
&#32;&#32;&#32;&#32;}&#32;

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Anzahl&#32;der&#32;65535-Mikrosekunden-Pakete&#32;berechnen</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint16_t&#32;sizeOf16Bit&#32;{0xFFFF};
&#32;&#32;&#32;&#32;uint8_t&#32;numberOfLoops&#32;=&#32;(us&#32;/&#32;sizeOf16Bit);

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verzögere&#32;für&#32;jedes&#32;65535-Mikrosekunden-Paket</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;loops&#32;=&#32;0;&#32;loops&#32;&lt;&#32;numberOfLoops;&#32;loops++)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1aad1dc8b4b2b15ed34db85f46514349a4">execDelayUs</link>(sizeOf16Bit);
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Verzögere&#32;den&#32;verbleibenden&#32;Teil</emphasis>
&#32;&#32;&#32;&#32;<link linkend="_class_my_controller_1aad1dc8b4b2b15ed34db85f46514349a4">execDelayUs</link>(us&#32;%&#32;sizeOf16Bit);
}


<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_my_controller_1aad1dc8b4b2b15ed34db85f46514349a4">MyController::execDelayUs</link>(uint16_t&#32;us)&#32;{

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Anzahl&#32;der&#32;Iterationen&#32;berechnen,&#32;basierend&#32;auf&#32;der&#32;CPU-Frequenz</emphasis>

&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;numberOfClkPerNOP&#32;{8};
&#32;&#32;&#32;&#32;uint32_t&#32;iterations&#32;=&#32;((F_CPU&#32;/&#32;1000000)&#32;*&#32;us&#32;/&#32;numberOfClkPerNOP);

&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Delay&#32;durchführen</emphasis>
&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;1:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;nop&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;subi&#32;%A0,&#32;1&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sbci&#32;%B0,&#32;0&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sbci&#32;%C0,&#32;0&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sbci&#32;%D0,&#32;0&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;brne&#32;1b&#32;&#32;&#32;&#32;&#32;\n&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=w&quot;</emphasis>&#32;(iterations)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;0&quot;</emphasis>&#32;(iterations)
&#32;&#32;&#32;&#32;);
}


<emphasis role="keywordtype">void</emphasis>&#32;MyController&#32;::execNop()&#32;{

&#32;&#32;<emphasis role="keyword">asm</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>(<emphasis role="stringliteral">&quot;nop&quot;</emphasis>);
}
</computeroutput></literallayout> </para>
</section>
