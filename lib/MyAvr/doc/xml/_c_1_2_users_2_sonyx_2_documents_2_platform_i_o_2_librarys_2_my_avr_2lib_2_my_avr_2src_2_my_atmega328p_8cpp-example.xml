<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_c_1_2_users_2_sonyx_2_documents_2_platform_i_o_2_librarys_2_my_avr_2lib_2_my_avr_2src_2_my_atmega328p_8cpp-example" kind="example">
    <compoundname>C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyAtmega328p.cpp</compoundname>
    <briefdescription>
<para>Constructor of the <ref refid="class_my_atmega328p" kindref="compound">MyAtmega328p</ref> class Initializes the CPU frequency of the microcontroller. </para>
    </briefdescription>
    <detaileddescription>
<para>Constructor of the <ref refid="class_my_atmega328p" kindref="compound">MyAtmega328p</ref> class Initializes the CPU frequency of the microcontroller.<simplesect kind="warning"><para>This method is considered unsafe in situations where incorrect CPU frequency can lead to system instability.</para>
</simplesect>
<simplesect kind="note"><para>It is important to verify the compatibility of the specified frequency with the microcontroller specifications.</para>
</simplesect>
<ref refid="class_my_atmega328p" kindref="compound">MyAtmega328p</ref> myController(F_CPU); <programlisting filename="C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyAtmega328p.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>HEADER</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_my_atmega328p_8hpp" kindref="compound">MyAtmega328p.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">MyAtmega328p<sp/>::MyAtmega328p(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f_cpu)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::writeToEEPROM(uint16_t<sp/>address,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>address<sp/>&lt;<sp/>E2END)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Speicherzugriff<sp/>einschränken<sp/>auf<sp/>den<sp/>EEPROM-Bereich</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>str.length();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>E2END<sp/>-<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>E2END<sp/>-<sp/>address;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>eeprom_write_block(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str.c_str()),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(address),<sp/>length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::readFromEEPROM(uint16_t<sp/>address,<sp/>String<sp/>&amp;str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_buffer)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>address<sp/>&lt;<sp/>E2END)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Überprüfen,<sp/>ob<sp/>Adresse<sp/>innerhalb<sp/>des<sp/>EEPROM-Bereichs<sp/>liegt</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>E2END<sp/>-<sp/>address;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>size_buffer)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>=<sp/>size_buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[length<sp/>+<sp/>1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>eeprom_read_block(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(address),<sp/>length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buffer[length]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::writeToEEPROM(uint16_t<sp/>address,<sp/>uint8_t<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>address<sp/>&lt;<sp/>E2END)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Speicher-Zugriff<sp/>einschränken<sp/>auf<sp/>Adressebereich<sp/>des<sp/>EEPROM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>eeprom_write_byte((uint8_t*)address,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>MyAtmega328p<sp/>::readFromEEPROM(uint16_t<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>address<sp/>&lt;<sp/>E2END)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Überprüfen,<sp/>ob<sp/>Adresse<sp/>innerhalb<sp/>des<sp/>EEPROM-Bereichs<sp/>liegt</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eeprom_read_byte((uint8_t*)address);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Rückgabewert,<sp/>wenn<sp/>Adresse<sp/>ungültig<sp/>ist</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::execTest(uint16_t<sp/>delay)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Den<sp/>digitalen<sp/>Pin<sp/>als<sp/>Ausgang<sp/>konfigurieren</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DDRB<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>DDB5);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>setBit(DDRB,<sp/>DDB5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Die<sp/>LED<sp/>einschalten</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PORTB<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>PORTB5);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>setBit(PORTB,<sp/>DDB5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>execDelayMs(delay);<sp/></highlight><highlight class="comment">//<sp/>Eine<sp/>Sekunde<sp/>warten</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Die<sp/>LED<sp/>ausschalten</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PORTB<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>PORTB5);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>setBit(PORTB,<sp/>DDB5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>execDelayMs(delay);<sp/></highlight><highlight class="comment">//<sp/>Eine<sp/>Sekunde<sp/>warten</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::initUart(uint32_t<sp/>baudrate)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint16_t<sp/>ubrr<sp/>=<sp/>F_CPU<sp/>/<sp/>(16<sp/>*<sp/>baudrate)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>UBRR0H<sp/>=<sp/>(uint8_t)(ubrr<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>UBRR0L<sp/>=<sp/>(uint8_t)ubrr;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>receiver<sp/>and<sp/>transmitter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>UCSR0B<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>RXEN0)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>TXEN0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>frame<sp/>format:<sp/>8data,<sp/>2stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UCSR0C<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ01)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>UCSZ00);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>UCSR0C<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>USBS0)<sp/>|<sp/>(3<sp/>&lt;&lt;<sp/>UCSZ00);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printUart(</highlight><highlight class="stringliteral">&quot;\nHello<sp/>World!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::sendCharUart(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(UCSR0A<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>UDRE0)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UDR0<sp/>=<sp/>c;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::printUart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sendCharUart(str[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_my_atmega328p_1a23a876fa091060f4ecc2c97867eda9fd" kindref="member">MyAtmega328p::printUart</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;str)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>str.length();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sendCharUart(str.charAt(i));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyAtmega328p<sp/>::setTC0Config(<ref refid="_my_avr_8hpp_1a6254561796d46c748001adeaf5e6d93c" kindref="member">enum_tcmodes</ref><sp/>mode,<sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84" kindref="member">enum_tcprescalers</ref><sp/>prescaler,<sp/>uint8_t<sp/>value_top)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Konfiguriere<sp/>Timer/Counter<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>Mode<sp/><sp/>|<sp/>WGM02<sp/>|<sp/>WGM01<sp/>|<sp/>WGM00<sp/>|<sp/>Timer/Counter<sp/>Mode<sp/>of<sp/>Operation<sp/>|<sp/>TOP<sp/><sp/><sp/>|<sp/>Update<sp/>of<sp/>OCR0x<sp/>at<sp/>TOV<sp/>Flag<sp/>Set<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>Normal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0xFF<sp/><sp/>|<sp/>Immediate<sp/>MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>PWM,<sp/>Phase<sp/>Correct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0xFF<sp/><sp/>|<sp/>TOP<sp/>BOTTOM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>2<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>CTC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>OCRA<sp/><sp/>|<sp/>Immediate<sp/>MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>3<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>Fast<sp/>PWM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0xFF<sp/><sp/>|<sp/>BOTTOM<sp/>MAX</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>5<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>PWM,<sp/>Phase<sp/>Correct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>OCRA<sp/><sp/>|<sp/>TOP<sp/>BOTTOM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>7<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>1<sp/><sp/><sp/><sp/><sp/>|<sp/>Fast<sp/>PWM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>OCRA<sp/><sp/>|<sp/>BOTTOM<sp/>TOP</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a6254561796d46c748001adeaf5e6d93cad472717efbd11a2e3c7a10a2bcece779" kindref="member">CTC</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ctc<sp/>modus<sp/>einrichten</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(TCCR0A,<sp/>WGM00,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(TCCR0A,<sp/>WGM01,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(TCCR0B,<sp/>WGM02,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prescaler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>setTC01Prescaler(prescaler,<sp/>TCCR0B,<sp/>CS02,<sp/>CS01,<sp/>CS00);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setze<sp/>den<sp/>Vergleichswert<sp/>für<sp/>den<sp/>CTC-Modus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>don&apos;t<sp/>use<sp/>this<sp/>calculation.<sp/>Do<sp/>this<sp/>in<sp/>the<sp/>main<sp/>code<sp/>instead!</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>clkPerMillisekond<sp/>{<sp/>(<sp/>cpuFreq<sp/>/<sp/>n<sp/>)<sp/>/<sp/>1000<sp/>};</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>OCR0A<sp/>=<sp/>(<sp/>(<sp/>clkPerMillisekond<sp/>*<sp/>topTime<sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OCR0A<sp/>=<sp/>value_top;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>aktivieren</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(TIMSK0,<sp/>OCIE0A);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sei();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>MyAtmega328p<sp/>::setTC01Prescaler(<ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84" kindref="member">enum_tcprescalers</ref><sp/>prescaler,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>&amp;reg,<sp/>uint8_t<sp/>bit_02,<sp/>uint8_t<sp/>bit_01,<sp/>uint8_t<sp/>bit_00)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prescaler<sp/>Tabelle</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|02<sp/>|01<sp/>|00<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/>0<sp/>|<sp/>0<sp/>|<sp/>No<sp/>clock<sp/>source<sp/>(Timer/Counter<sp/>stopped)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/>0<sp/>|<sp/>1<sp/>|<sp/>clkI/O/1<sp/>(No<sp/>prescaling)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/>1<sp/>|<sp/>0<sp/>|<sp/>clkI/O/8<sp/>(From<sp/>prescaler)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>0<sp/>|<sp/>1<sp/>|<sp/>1<sp/>|<sp/>clkI/O/64<sp/>(From<sp/>prescaler)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>1<sp/>|<sp/>0<sp/>|<sp/>0<sp/>|<sp/>clkI/O/256<sp/>(From<sp/>prescaler)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>1<sp/>|<sp/>0<sp/>|<sp/>1<sp/>|<sp/>clkI/O/1024<sp/>(From<sp/>prescaler)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>1<sp/>|<sp/>1<sp/>|<sp/>0<sp/>|<sp/>External<sp/>clock<sp/>source<sp/>on<sp/>T0<sp/>pin.<sp/>Clock<sp/>on<sp/>falling<sp/>edge.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>|<sp/>1<sp/>|<sp/>1<sp/>|<sp/>1<sp/>|<sp/>External<sp/>clock<sp/>source<sp/>on<sp/>T0<sp/>pin.<sp/>Clock<sp/>on<sp/>rising<sp/>edge.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(prescaler)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84ad2ef98ac0d98086868c235ef37670273" kindref="member">CLK_1</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a4f4b40052b3e128cbef3e15dd579c50e" kindref="member">CLK_8</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a0a39b4aae1959fc16bbe8382aa2f36de" kindref="member">CLK_64</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84adb5e9424a002d86170784b48e6943810" kindref="member">CLK_256</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>256;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84add15888bea74c6eeca3a3fb06181b857" kindref="member">CLK_1024</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1024;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84a33416c83ecdef3b829acc08e92983853" kindref="member">EXT_CLK_SOURCE_FALLING_EDGE</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a9aa7f3e1598b10585757c2dab7cb9a84abf7407a632cd1a1dc9eaa6fca42ee2a8" kindref="member">EXT_CLK_SOURCE_RISING_EDGE</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_00,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_01,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setBit(reg,<sp/>bit_02,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_my_atmega328p_1a91986a3df6ec4032907aacf06696a8a6" kindref="member">MyAtmega328p::execSleep</ref>(<ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374" kindref="member">enum_sleepmodes</ref><sp/>mode,<sp/>uint8_t<sp/>bits_power_reduction,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_bod_sleep)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>interrupts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cli();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b" kindref="member">setBit</ref>(MCUCR,<sp/>SE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>requested<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374afd6a0e4343048b10646dd2976cc5ad18" kindref="member">IDLE</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a19e4c86357ccabfaf43e2fabe2189f3c" kindref="member">ADC_NOISE_REDUCTION</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1a552532ef8cb1a262be9029c7609a62c6" kindref="member">setBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a2abda45f1b1e5bbe193611fb41ae7dfa" kindref="member">POWER_DOWN</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1a552532ef8cb1a262be9029c7609a62c6" kindref="member">setBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0));<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374a412ffca781db3a099f287df487667d19" kindref="member">POWER_SAVE</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1a552532ef8cb1a262be9029c7609a62c6" kindref="member">setBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374ae4634ae4352b512b38c5da9dc1610ca6" kindref="member">STANDBY</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>recommend<sp/>for<sp/>use<sp/>with<sp/>external<sp/>crystals<sp/>or<sp/>resonators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1a552532ef8cb1a262be9029c7609a62c6" kindref="member">setBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_my_avr_8hpp_1a5ea866ecdf7cb2426827d8cc01425374ad57e897be0d28a3218fa9fc2eeb650e2" kindref="member">EXTENDED_STANDBY</ref>:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>recommend<sp/>for<sp/>use<sp/>with<sp/>external<sp/>crystals<sp/>or<sp/>resonators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1a552532ef8cb1a262be9029c7609a62c6" kindref="member">setBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2)<sp/>);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>sleep<sp/>mode,<sp/>return<sp/>imidiately</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>power<sp/>reduction<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PRR<sp/>|=<sp/>bits_power_reduction;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_bod_sleep)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>BODS<sp/>bit<sp/>and<sp/>set<sp/>BODS<sp/>to<sp/>disable<sp/>BOD<sp/>in<sp/>sleep<sp/>mode<sp/>if<sp/>enableBODSleep<sp/>is<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b" kindref="member">setBit</ref>(MCUCR,<sp/>BODS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b" kindref="member">setBit</ref>(MCUCR,<sp/>BODSE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1ac11d8131f2a39a638ace4418adeebbd7" kindref="member">clearBit</ref>(MCUCR,<sp/>BODSE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delay<sp/>for<sp/>three<sp/>clock<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b" kindref="member">setBit</ref>(SMCR,<sp/>SE);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>interrupts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sei();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;sleep&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Execution<sp/>will<sp/>resume<sp/>here<sp/>after<sp/>waking<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>power<sp/>reduction<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PRR<sp/>&amp;=<sp/>~bits_power_reduction;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_bod_sleep)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>BOD<sp/>after<sp/>sleep<sp/>mode<sp/>if<sp/>enableBODSleep<sp/>is<sp/>true<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_my_controller_1ac11d8131f2a39a638ace4418adeebbd7" kindref="member">clearBit</ref>(MCUCR,<sp/>BODS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>sleep<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="class_my_controller_1ae7487dc0d9d6d550e354b0e7153ac76b" kindref="member">setBit</ref>(MCUCR,<sp/>SE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="class_my_controller_1af0956247c7fafc6d5797b3e0fa7d09cd" kindref="member">clearBitMask</ref>(SMCR,<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM0)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM1)<sp/>|<sp/><ref refid="_my_avr_8hpp_1a308c5c722f9ed9393cf6e5026fc81600" kindref="member">BITMASK</ref>(SM2));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="C:/Users/Sonyx/Documents/PlatformIO/Librarys/MyAvr/lib/MyAvr/src/MyAtmega328p.cpp"/>
  </compounddef>
</doxygen>
